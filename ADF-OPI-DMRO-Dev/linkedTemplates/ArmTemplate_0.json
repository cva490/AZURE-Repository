{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "ADF-OPI-DMRO-Dev"
		},
		"OPI_DMRO_Blob_Connection_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'OPI_DMRO_Blob_Connection'"
		},
		"OPI_DMRO_Azure_DB_Connection_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'OPI_DMRO_Azure_DB_Connection'"
		},
		"OPI_DMRO_Onpremise_SQL_Connection_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'OPI_DMRO_Onpremise_SQL_Connection'"
		},
		"AzureKeyVaultConnection_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://kypasswordvault.vault.azure.net/"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/AzureKeyVaultConnection')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('AzureKeyVaultConnection_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/OPI_DMRO_Blob_Connection')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('OPI_DMRO_Blob_Connection_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/OPI-DMRO-Onpremise-IR')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/BlobOnpremiseFilechecking')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OPI_DMRO_Blob_Connection",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@formatDateTime(utcNow(),'yyyy-MM-dd')",
							"type": "Expression"
						},
						"container": "onpremisefiles"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OPI_DMRO_Blob_Connection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BlobOnpremiseFiles')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OPI_DMRO_Blob_Connection",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"OnpremiseFolder": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@concat('Daytransactions_',formatDateTime(utcnow(),'yyyy-MM-dd'),'.csv')",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@formatDateTime(utcnow(),'yyyy-MM-dd')",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().OnpremiseFolder",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OPI_DMRO_Blob_Connection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BlobOnpremiseFileslooping')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OPI_DMRO_Blob_Connection",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@formatDateTime(utcNow(),'yyyy-MM-dd')",
							"type": "Expression"
						},
						"container": "onpremisefiles"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OPI_DMRO_Blob_Connection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SnowflakeBolbFiles')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OPI_DMRO_Blob_Connection",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@concat('Dailytransactions_',formatDateTime(utcNow(),'yyyy-MM-dd'),'.csv')",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@formatDateTime(utcNow(),'yyyy-MM-dd')",
							"type": "Expression"
						},
						"container": "snowflakeinputfiles"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OPI_DMRO_Blob_Connection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/archievingfiles')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OPI_DMRO_Blob_Connection",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@concat('Dailytransactions_',formatDateTime(utcNow(),'yyyy-MM-dd'),'.txt')",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@formatDateTime(utcNow(),'yyyy-MM-dd')",
							"type": "Expression"
						},
						"container": "archievefolder"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OPI_DMRO_Blob_Connection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OPI_DMRO_Azure_DB_Connection')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('OPI_DMRO_Azure_DB_Connection_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureKeyVaultConnection",
							"type": "LinkedServiceReference"
						},
						"secretName": "Password"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureKeyVaultConnection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OPI_DMRO_Onpremise_SQL_Connection')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"OnpremiseDBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('OPI_DMRO_Onpremise_SQL_Connection_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureKeyVaultConnection",
							"type": "LinkedServiceReference"
						},
						"secretName": "Password"
					}
				},
				"connectVia": {
					"referenceName": "OPI-DMRO-Onpremise-IR",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/OPI-DMRO-Onpremise-IR')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureKeyVaultConnection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSQLDB')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OPI_DMRO_Azure_DB_Connection",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "BanktransactionDetail"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OPI_DMRO_Azure_DB_Connection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSQLDBQuery')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OPI_DMRO_Azure_DB_Connection",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "BanktransactionDetail"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OPI_DMRO_Azure_DB_Connection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OnpremiseSqlServer')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OPI_DMRO_Onpremise_SQL_Connection",
					"type": "LinkedServiceReference",
					"parameters": {
						"OnpremiseDBName": {
							"value": "@dataset().dsOnPremiseDBName",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"dsOnPremiseDBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OPI_DMRO_Onpremise_SQL_Connection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/P_AzuretoBlob')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "checkingazuredata",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select  Count(1) as RecordCount\nfrom [dbo].[BanktransactionDetail]\nwhere dateadd(day,365,cast([Transaction Date] as date))=cast(getdate() as date)",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSQLDB",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "checking",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "checkingazuredata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('checkingazuredata').output.firstrow.RecordCount,0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "movingdatatosnowflakeblob",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": "select  [S No#], \ncast(getdate() as date) as [Value Date], \ncast([Transaction Date] as date) [Transaction Date], \n[Cheque Number], \n[Transaction Remarks], \n[Withdrawal Amount (INR )], \n[Deposit Amount (INR )], \n[Balance (INR )]\nfrom [dbo].[BanktransactionDetail]\nwhere dateadd(day,365,cast([Transaction Date] as date))=cast(getdate() as date)",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "S No#",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "S No#",
														"type": "String",
														"physicalType": "String"
													}
												},
												{
													"source": {
														"name": "Value Date",
														"type": "DateTime",
														"physicalType": "date"
													},
													"sink": {
														"name": "Value Date",
														"type": "String",
														"physicalType": "String"
													}
												},
												{
													"source": {
														"name": "Transaction Date",
														"type": "DateTime",
														"physicalType": "date"
													},
													"sink": {
														"name": "Transaction Date",
														"type": "String",
														"physicalType": "String"
													}
												},
												{
													"source": {
														"name": "Cheque Number",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "Cheque Number",
														"type": "String",
														"physicalType": "String"
													}
												},
												{
													"source": {
														"name": "Transaction Remarks",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "Transaction Remarks",
														"type": "String",
														"physicalType": "String"
													}
												},
												{
													"source": {
														"name": "Withdrawal Amount (INR )",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 10,
														"precision": 32
													},
													"sink": {
														"name": "Withdrawal Amount (INR )",
														"type": "String",
														"physicalType": "String"
													}
												},
												{
													"source": {
														"name": "Deposit Amount (INR )",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 10,
														"precision": 32
													},
													"sink": {
														"name": "Deposit Amount (INR )",
														"type": "String",
														"physicalType": "String"
													}
												},
												{
													"source": {
														"name": "Balance (INR )",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 10,
														"precision": 32
													},
													"sink": {
														"name": "Balance (INR )",
														"type": "String",
														"physicalType": "String"
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "AzureSQLDB",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "SnowflakeBolbFiles",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					},
					{
						"name": "loggingpipeline",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "checking",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[udp_pipelineloging]",
							"storedProcedureParameters": {
								"createdby": {
									"value": {
										"value": "@pipeline().DataFactory",
										"type": "Expression"
									},
									"type": "String"
								},
								"pipelinename": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"trgname": {
									"value": {
										"value": "@pipeline().TriggerName",
										"type": "Expression"
									},
									"type": "String"
								},
								"trgruntime": {
									"value": {
										"value": "@pipeline().TriggerTime",
										"type": "Expression"
									},
									"type": "DateTime"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "OPI_DMRO_Azure_DB_Connection",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSQLDB')]",
				"[concat(variables('factoryId'), '/linkedServices/OPI_DMRO_Azure_DB_Connection')]",
				"[concat(variables('factoryId'), '/datasets/SnowflakeBolbFiles')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/P_BlobtoAzureDB')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CheckingFileExistance",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "DeletingCurrentdayrecords",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "BlobOnpremiseFilechecking",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "Looping for each file",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "CheckingFileExistance",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('CheckingFileExistance').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "MovingDataBlobtoAzureDB",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"wildcardFolderPath": {
													"value": "@formatDateTime(utcNow(),'yyyy-MM-dd')",
													"type": "Expression"
												},
												"wildcardFileName": {
													"value": "@item().name",
													"type": "Expression"
												},
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "S No#",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "S No#",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "Value Date",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "Value Date",
														"type": "String",
														"physicalType": "nvarchar"
													}
												},
												{
													"source": {
														"name": "Transaction Date",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "Transaction Date",
														"type": "String",
														"physicalType": "nvarchar"
													}
												},
												{
													"source": {
														"name": "Cheque Number",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "Cheque Number",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "Transaction Remarks",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "Transaction Remarks",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "Withdrawal Amount (INR )",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "Withdrawal Amount (INR )",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 10,
														"precision": 32
													}
												},
												{
													"source": {
														"name": "Deposit Amount (INR )",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "Deposit Amount (INR )",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 10,
														"precision": 32
													}
												},
												{
													"source": {
														"name": "Balance (INR )",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "Balance (INR )",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 10,
														"precision": 32
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "BlobOnpremiseFilechecking",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "AzureSQLDB",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "Archieving files",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "MovingDataBlobtoAzureDB",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"wildcardFolderPath": {
													"value": "@formatDateTime(utcnow(),'yyyy-MM-dd')",
													"type": "Expression"
												},
												"wildcardFileName": {
													"value": "@item().name",
													"type": "Expression"
												},
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "BlobOnpremiseFileslooping",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "archievingfiles",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "Delete1",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Archieving files",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "BlobOnpremiseFileslooping",
											"type": "DatasetReference",
											"parameters": {}
										},
										"logStorageSettings": {
											"linkedServiceName": {
												"referenceName": "OPI_DMRO_Blob_Connection",
												"type": "LinkedServiceReference"
											},
											"path": "deletedfileslogging"
										},
										"enableLogging": true,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"wildcardFileName": {
												"value": "@{concat('Daytransactions_',formatDateTime(utcNow(),'yyyy-MM-dd'),'.csv')}",
												"type": "Expression"
											},
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					},
					{
						"name": "logigingpipeline",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Looping for each file",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[udp_pipelineloging]",
							"storedProcedureParameters": {
								"createdby": {
									"value": {
										"value": "@pipeline().DataFactory",
										"type": "Expression"
									},
									"type": "String"
								},
								"pipelinename": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"trgname": {
									"value": {
										"value": "@pipeline().TriggerName",
										"type": "Expression"
									},
									"type": "String"
								},
								"trgruntime": {
									"value": {
										"value": "@pipeline().TriggerTime",
										"type": "Expression"
									},
									"type": "DateTime"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "OPI_DMRO_Azure_DB_Connection",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "DeletingCurrentdayrecords",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "OPI_DMRO_Azure_DB_Connection",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "delete\nfrom [dbo].[BanktransactionDetail]\nwhere dateadd(day,365,cast([Transaction Date] as date))=cast(getdate() as date)\n"
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/BlobOnpremiseFilechecking')]",
				"[concat(variables('factoryId'), '/linkedServices/OPI_DMRO_Azure_DB_Connection')]",
				"[concat(variables('factoryId'), '/datasets/AzureSQLDB')]",
				"[concat(variables('factoryId'), '/datasets/BlobOnpremiseFileslooping')]",
				"[concat(variables('factoryId'), '/datasets/archievingfiles')]",
				"[concat(variables('factoryId'), '/linkedServices/OPI_DMRO_Blob_Connection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/P_OnpremisetoBlob')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "hasData",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "\nselect  Count(1) as RecordCount\nfrom [dbo].[BanktransactionDetail]\nwhere dateadd(day,365,convert(date,[Transaction Date],105))=convert(date,getdate(),105)",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "OnpremiseSqlServer",
								"type": "DatasetReference",
								"parameters": {
									"dsOnPremiseDBName": {
										"value": "@pipeline().parameters.DBName",
										"type": "Expression"
									}
								}
							}
						}
					},
					{
						"name": "Record Checking",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "hasData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('hasData').output.firstrow.RecordCount,0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Moving Data",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": "select  [S No#], \nconvert(date,[Value Date],105) as [Value Date], \nconvert(date,[Transaction Date],105) [Transaction Date], \n[Cheque Number], \n[Transaction Remarks], \n[Withdrawal Amount (INR )], \n[Deposit Amount (INR )], \n[Balance (INR )]\nfrom [dbo].[BanktransactionDetail]\nwhere dateadd(day,365,convert(date,[Transaction Date],105))=convert(date,getdate(),105)",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "S No#",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "S No#",
														"type": "String",
														"physicalType": "String"
													}
												},
												{
													"source": {
														"name": "Value Date",
														"type": "DateTime",
														"physicalType": "date"
													},
													"sink": {
														"name": "Value Date",
														"type": "String",
														"physicalType": "String"
													}
												},
												{
													"source": {
														"name": "Transaction Date",
														"type": "DateTime",
														"physicalType": "date"
													},
													"sink": {
														"name": "Transaction Date",
														"type": "String",
														"physicalType": "String"
													}
												},
												{
													"source": {
														"name": "Cheque Number",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "Cheque Number",
														"type": "String",
														"physicalType": "String"
													}
												},
												{
													"source": {
														"name": "Transaction Remarks",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "Transaction Remarks",
														"type": "String",
														"physicalType": "String"
													}
												},
												{
													"source": {
														"name": "Withdrawal Amount (INR )",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 10,
														"precision": 32
													},
													"sink": {
														"name": "Withdrawal Amount (INR )",
														"type": "String",
														"physicalType": "String"
													}
												},
												{
													"source": {
														"name": "Deposit Amount (INR )",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 10,
														"precision": 32
													},
													"sink": {
														"name": "Deposit Amount (INR )",
														"type": "String",
														"physicalType": "String"
													}
												},
												{
													"source": {
														"name": "Balance (INR )",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 10,
														"precision": 32
													},
													"sink": {
														"name": "Balance (INR )",
														"type": "String",
														"physicalType": "String"
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "OnpremiseSqlServer",
											"type": "DatasetReference",
											"parameters": {
												"dsOnPremiseDBName": "ADFLearning"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "BlobOnpremiseFiles",
											"type": "DatasetReference",
											"parameters": {
												"OnpremiseFolder": {
													"value": "@pipeline().parameters.FolderName",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "Loggingpipeline",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Record Checking",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[udp_pipelineloging]",
							"storedProcedureParameters": {
								"createdby": {
									"value": {
										"value": "@pipeline().DataFactory",
										"type": "Expression"
									},
									"type": "String"
								},
								"pipelinename": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"trgname": {
									"value": {
										"value": "@pipeline().TriggerName",
										"type": "Expression"
									},
									"type": "String"
								},
								"trgruntime": {
									"value": {
										"value": "@pipeline().TriggerTime",
										"type": "Expression"
									},
									"type": "DateTime"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "OPI_DMRO_Azure_DB_Connection",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"DBName": {
						"type": "String",
						"defaultValue": "ADFLearning"
					},
					"FolderName": {
						"type": "string",
						"defaultValue": "onpremisefiles"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/OnpremiseSqlServer')]",
				"[concat(variables('factoryId'), '/linkedServices/OPI_DMRO_Azure_DB_Connection')]",
				"[concat(variables('factoryId'), '/datasets/BlobOnpremiseFiles')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_MovBlob2Azure_Using_Existing')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "OPI_DMRO_Blob_Connection",
								"type": "LinkedServiceReference"
							},
							"name": "Blobfilesoutput"
						},
						{
							"dataset": {
								"referenceName": "AzureSQLDBQuery",
								"type": "DatasetReference"
							},
							"name": "ADFSoriceforCache"
						},
						{
							"linkedService": {
								"referenceName": "OPI_DMRO_Azure_DB_Connection",
								"type": "LinkedServiceReference"
							},
							"name": "GettingMaxID"
						}
					],
					"sinks": [
						{
							"name": "CacheSink"
						},
						{
							"name": "CachingMaxID"
						},
						{
							"linkedService": {
								"referenceName": "OPI_DMRO_Azure_DB_Connection",
								"type": "LinkedServiceReference"
							},
							"name": "UpdatingSink"
						},
						{
							"linkedService": {
								"referenceName": "OPI_DMRO_Azure_DB_Connection",
								"type": "LinkedServiceReference"
							},
							"name": "InsertingintoSink"
						}
					],
					"transformations": [
						{
							"name": "ChickingExitingConditions"
						},
						{
							"name": "alterRowUpdate"
						},
						{
							"name": "surrogateKey1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {S No#} as integer,",
						"          {Value Date} as string,",
						"          {Transaction Date} as string,",
						"          {Cheque Number} as string,",
						"          {Transaction Remarks} as string,",
						"          {Withdrawal Amount (INR )} as double,",
						"          {Deposit Amount (INR )} as double,",
						"          {Balance (INR )} as double",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     limit: 10,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     container: 'onpremisefiles',",
						"     folderPath: '2022-03-10',",
						"     fileName: 'Daytransactions_2022-03-10.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> Blobfilesoutput",
						"source(output(",
						"          {S No#} as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'select  [S No#]\\nfrom [dbo].[BanktransactionDetail]',",
						"     format: 'query') ~> ADFSoriceforCache",
						"source(output(",
						"          Max_RowID as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'select isnull(max(Row_Id),0) as Max_RowID from [dbo].[BanktransactionDetail]',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> GettingMaxID",
						"Blobfilesoutput split(!isNull(CacheSink#lookup({S No#})),",
						"     disjoint: false) ~> ChickingExitingConditions@(Existing, nonExisting)",
						"ChickingExitingConditions@Existing alterRow(updateIf(equals(1,1))) ~> alterRowUpdate",
						"ChickingExitingConditions@nonExisting keyGenerate(output(key_surrogate as long),",
						"     startAt: 1L) ~> surrogateKey1",
						"surrogateKey1 derive(key_surrogate_newcolm = CachingMaxID#outputs()[1].Max_RowID+key_surrogate) ~> derivedColumn1",
						"ADFSoriceforCache sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     keys:['S No#'],",
						"     store: 'cache',",
						"     format: 'inline',",
						"     output: false,",
						"     saveOrder: 0,",
						"     mapColumn(",
						"          {S No#}",
						"     )) ~> CacheSink",
						"GettingMaxID sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     store: 'cache',",
						"     format: 'inline',",
						"     output: false,",
						"     saveOrder: 0,",
						"     mapColumn(",
						"          Max_RowID",
						"     )) ~> CachingMaxID",
						"alterRowUpdate sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'BanktransactionDetail',",
						"     insertable: false,",
						"     updateable: true,",
						"     deletable: false,",
						"     upsertable: false,",
						"     keys:['S No#'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          {S No#},",
						"          {Value Date},",
						"          {Transaction Date},",
						"          {Cheque Number},",
						"          {Transaction Remarks},",
						"          {Withdrawal Amount (INR )},",
						"          {Deposit Amount (INR )},",
						"          {Balance (INR )}",
						"     )) ~> UpdatingSink",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          {S No#} as integer,",
						"          {Value Date} as string,",
						"          {Transaction Date} as string,",
						"          {Cheque Number} as string,",
						"          {Transaction Remarks} as string,",
						"          {Withdrawal Amount (INR )} as decimal(32,10),",
						"          {Deposit Amount (INR )} as decimal(32,10),",
						"          {Balance (INR )} as decimal(32,10),",
						"          Row_Id as integer,",
						"          Trn_Year as integer,",
						"          Trn_Month as string",
						"     ),",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'BanktransactionDetail',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          {S No#},",
						"          {Value Date},",
						"          {Transaction Date},",
						"          {Cheque Number},",
						"          {Transaction Remarks},",
						"          {Withdrawal Amount (INR )},",
						"          {Deposit Amount (INR )},",
						"          {Balance (INR )},",
						"          Row_Id = key_surrogate_newcolm",
						"     )) ~> InsertingintoSink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OPI_DMRO_Blob_Connection')]",
				"[concat(variables('factoryId'), '/datasets/AzureSQLDBQuery')]",
				"[concat(variables('factoryId'), '/linkedServices/OPI_DMRO_Azure_DB_Connection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_MovBlob2Azure_usingAlterrow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "OPI_DMRO_Blob_Connection",
								"type": "LinkedServiceReference"
							},
							"name": "Blobfilesoutput"
						},
						{
							"dataset": {
								"referenceName": "AzureSQLDBQuery",
								"type": "DatasetReference"
							},
							"name": "ADFSoriceforCache"
						},
						{
							"linkedService": {
								"referenceName": "OPI_DMRO_Azure_DB_Connection",
								"type": "LinkedServiceReference"
							},
							"name": "GettingMaxID"
						}
					],
					"sinks": [
						{
							"name": "CacheSink"
						},
						{
							"linkedService": {
								"referenceName": "OPI_DMRO_Azure_DB_Connection",
								"type": "LinkedServiceReference"
							},
							"name": "LoadingtoAzure"
						},
						{
							"name": "CachingMaxID"
						}
					],
					"transformations": [
						{
							"name": "AlterRowData"
						},
						{
							"name": "genetatingRowKey"
						},
						{
							"name": "RowIDSurrogate"
						},
						{
							"name": "FilterindDummyColumns"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {S No#} as integer,",
						"          {Value Date} as string,",
						"          {Transaction Date} as string,",
						"          {Cheque Number} as string,",
						"          {Transaction Remarks} as string,",
						"          {Withdrawal Amount (INR )} as double,",
						"          {Deposit Amount (INR )} as double,",
						"          {Balance (INR )} as double",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     limit: 10,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     container: 'onpremisefiles',",
						"     folderPath: '2022-03-10',",
						"     fileName: 'Daytransactions_2022-03-10.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> Blobfilesoutput",
						"source(output(",
						"          {S No#} as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'select  [S No#]\\nfrom [dbo].[BanktransactionDetail]',",
						"     format: 'query') ~> ADFSoriceforCache",
						"source(output(",
						"          Max_RowID as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'select isnull(max(Row_Id),0) as Max_RowID from [dbo].[BanktransactionDetail]',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> GettingMaxID",
						"Blobfilesoutput alterRow(updateIf(!isNull(CacheSink#lookup({S No#})))) ~> AlterRowData",
						"RowIDSurrogate derive(RowKey = CachingMaxID#outputs()[1].Max_RowID + RowIDSurrogate_key) ~> genetatingRowKey",
						"AlterRowData keyGenerate(output(RowIDSurrogate_key as long),",
						"     startAt: 1L) ~> RowIDSurrogate",
						"genetatingRowKey select(mapColumn(",
						"          {S No#},",
						"          {Value Date},",
						"          {Transaction Date},",
						"          {Cheque Number},",
						"          {Transaction Remarks},",
						"          {Withdrawal Amount (INR )},",
						"          {Deposit Amount (INR )},",
						"          {Balance (INR )},",
						"          RowKey",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> FilterindDummyColumns",
						"ADFSoriceforCache sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     keys:['S No#'],",
						"     store: 'cache',",
						"     format: 'inline',",
						"     output: false,",
						"     saveOrder: 1,",
						"     mapColumn(",
						"          {S No#}",
						"     )) ~> CacheSink",
						"FilterindDummyColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          {S No#} as integer,",
						"          {Value Date} as string,",
						"          {Transaction Date} as string,",
						"          {Cheque Number} as string,",
						"          {Transaction Remarks} as string,",
						"          {Withdrawal Amount (INR )} as decimal(32,10),",
						"          {Deposit Amount (INR )} as decimal(32,10),",
						"          {Balance (INR )} as decimal(32,10),",
						"          Row_Id as integer",
						"     ),",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'BanktransactionDetail',",
						"     insertable: true,",
						"     updateable: true,",
						"     deletable: false,",
						"     upsertable: false,",
						"     keys:['S No#'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          {S No#},",
						"          {Value Date},",
						"          {Transaction Date},",
						"          {Cheque Number},",
						"          {Transaction Remarks},",
						"          {Withdrawal Amount (INR )},",
						"          {Deposit Amount (INR )},",
						"          {Balance (INR )},",
						"          Row_Id = RowKey",
						"     )) ~> LoadingtoAzure",
						"GettingMaxID sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     store: 'cache',",
						"     format: 'inline',",
						"     output: false,",
						"     saveOrder: 1,",
						"     mapColumn(",
						"          Max_RowID",
						"     )) ~> CachingMaxID"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OPI_DMRO_Blob_Connection')]",
				"[concat(variables('factoryId'), '/datasets/AzureSQLDBQuery')]",
				"[concat(variables('factoryId'), '/linkedServices/OPI_DMRO_Azure_DB_Connection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/P_DF_LoadingDatatoAzure')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_loadingAzure_incremental",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_MovBlob2Azure_usingAlterrow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Blobfilesoutput": {},
									"ADFSoriceforCache": {},
									"GettingMaxID": {},
									"CacheSink": {},
									"LoadingtoAzure": {},
									"CachingMaxID": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_MovBlob2Azure_usingAlterrow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/P_DF_LoadingDatatoAzure_Exisitng')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_loadingAzure_incremental",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_MovBlob2Azure_Using_Existing",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Blobfilesoutput": {},
									"ADFSoriceforCache": {},
									"GettingMaxID": {},
									"CacheSink": {},
									"CachingMaxID": {},
									"UpdatingSink": {},
									"InsertingintoSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_MovBlob2Azure_Using_Existing')]"
			]
		}
	]
}