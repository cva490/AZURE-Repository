{
	"name": "df_MovBlob2Azure_Using_Existing",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "OPI_DMRO_Blob_Connection",
						"type": "LinkedServiceReference"
					},
					"name": "Blobfilesoutput"
				},
				{
					"dataset": {
						"referenceName": "AzureSQLDBQuery",
						"type": "DatasetReference"
					},
					"name": "ADFSoriceforCache"
				},
				{
					"linkedService": {
						"referenceName": "OPI_DMRO_Azure_DB_Connection",
						"type": "LinkedServiceReference"
					},
					"name": "GettingMaxID"
				}
			],
			"sinks": [
				{
					"name": "CacheSink"
				},
				{
					"name": "CachingMaxID"
				},
				{
					"dataset": {
						"referenceName": "AzureSQLDB",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "AzureSQLDB",
						"type": "DatasetReference"
					},
					"name": "UpdatingSink"
				},
				{
					"dataset": {
						"referenceName": "AzureSQLDB",
						"type": "DatasetReference"
					},
					"name": "InsertintoSink"
				}
			],
			"transformations": [
				{
					"name": "ChickingExitingConditions"
				}
			],
			"scriptLines": [
				"source(output(",
				"          {S No#} as integer,",
				"          {Value Date} as string,",
				"          {Transaction Date} as string,",
				"          {Cheque Number} as string,",
				"          {Transaction Remarks} as string,",
				"          {Withdrawal Amount (INR )} as double,",
				"          {Deposit Amount (INR )} as double,",
				"          {Balance (INR )} as double",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     limit: 10,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     container: 'onpremisefiles',",
				"     folderPath: '2022-03-10',",
				"     fileName: 'Daytransactions_2022-03-10.csv',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> Blobfilesoutput",
				"source(output(",
				"          {S No#} as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'select  [S No#]\\nfrom [dbo].[BanktransactionDetail]',",
				"     format: 'query') ~> ADFSoriceforCache",
				"source(output(",
				"          Max_RowID as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'query',",
				"     store: 'sqlserver',",
				"     query: 'select isnull(max(Row_Id),0) as Max_RowID from [dbo].[BanktransactionDetail]',",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> GettingMaxID",
				"Blobfilesoutput split(!isNull(CacheSink#lookup({S No#})),",
				"     disjoint: false) ~> ChickingExitingConditions@(Existing, nonExisting)",
				"ADFSoriceforCache sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     keys:['S No#'],",
				"     store: 'cache',",
				"     format: 'inline',",
				"     output: false,",
				"     saveOrder: 0,",
				"     mapColumn(",
				"          {S No#}",
				"     )) ~> CacheSink",
				"GettingMaxID sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     store: 'cache',",
				"     format: 'inline',",
				"     output: false,",
				"     saveOrder: 0,",
				"     mapColumn(",
				"          Max_RowID",
				"     )) ~> CachingMaxID",
				"Blobfilesoutput sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink1",
				"ChickingExitingConditions@Existing sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:true,",
				"     upsertable:false,",
				"     keys:['S No#'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          {S No#},",
				"          {Value Date},",
				"          {Transaction Date},",
				"          {Cheque Number},",
				"          {Transaction Remarks},",
				"          {Withdrawal Amount (INR )},",
				"          {Deposit Amount (INR )},",
				"          {Balance (INR )}",
				"     )) ~> UpdatingSink",
				"ChickingExitingConditions@nonExisting sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          {S No#},",
				"          {Value Date},",
				"          {Transaction Date},",
				"          {Cheque Number},",
				"          {Transaction Remarks},",
				"          {Withdrawal Amount (INR )},",
				"          {Deposit Amount (INR )},",
				"          {Balance (INR )}",
				"     )) ~> InsertintoSink"
			]
		}
	}
}